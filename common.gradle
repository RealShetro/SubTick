apply plugin: 'maven-publish'
apply plugin: 'fabric-loom'
apply plugin: 'com.replaymod.preprocess'

int mcVersion = project.mcVersion

preprocess {
  // mcVersion = vars.get()["MC"]
  tabIndentation = false
}

repositories {
  maven {
    url 'https://masa.dy.fi/maven'
  }
  maven {
    url 'https://jitpack.io'
  }
  maven {
    url 'https://www.cursemaven.com'
  }
  maven {
    url 'https://maven.g4mesoft.com/releases'
  }
  maven {
    url 'https://api.modrinth.com/maven'
    content {
      includeGroup 'maven.modrinth'
    }
  }
  maven {
    url 'https://maven.terraformersmc.com/releases'
  }
}

dependencies {
  // loom
  minecraft "com.mojang:minecraft:${project.minecraft_version}"
  mappings loom.layered {
    mappings file("../../lithium_mappings.tiny")
    mappings file("../../malilib_mappings.tiny")
    officialMojangMappings()
  }
  modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
  modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
  // mods
  modImplementation "carpet:fabric-carpet:${project.carpet_core_version}"
  modImplementation "com.g4mesoft:g4mespeed:${project.g4mespeed_version}"
  modImplementation "maven.modrinth:lithium:${project.lithium_version}"
  modImplementation "fi.dy.masa.malilib:malilib-fabric-${project.malilib_version}"
  modImplementation "com.terraformersmc:modmenu:${project.mod_menu_version}"
}

JavaVersion JAVA_COMPATIBILITY
if (mcVersion >= 11800) {
  JAVA_COMPATIBILITY = JavaVersion.VERSION_17
}
else if (mcVersion >= 11700) {
  JAVA_COMPATIBILITY = JavaVersion.VERSION_16
}
else {
  JAVA_COMPATIBILITY = JavaVersion.VERSION_1_8
}

loom {
  runConfigs.all {
    runDir '../../run'
    vmArgs '-Dmixin.debug.export=true'
    ideConfigGenerated true
  }
  accessWidenerPath = file("src/main/resources/subtick.accesswidener")
}

remapJar {
  remapperIsolation = true
}

String versionSuffix = ''
if (System.getenv("BUILD_RELEASE") != "true") {
  String buildNumber = System.getenv("BUILD_ID")
  versionSuffix += buildNumber != null ? ('+build.' + buildNumber) : '-SHAPSHOT'
}
String fullModVersion = project.mod_version + versionSuffix

version = 'v' + fullModVersion
group = project.maven_group
archivesBaseName = project.archives_base_name + '-mc' + project.minecraft_version

processResources {
  inputs.property "version", fullModVersion

  filesMatching("fabric.mod.json") {
    def valueMap = [
      "version": fullModVersion,
      "carpet_dependency": project.carpet_dependency,
      "minecraft_dependency": project.minecraft_dependency,
    ]
    expand valueMap
  }

  filesMatching("subtick.mixins.json") {
    expand "compatibility_level": "JAVA_${JAVA_COMPATIBILITY.ordinal() + 1}"
  }
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = "UTF-8"
  options.compilerArgs << "-Xlint:deprecation" << "-Xlint:removal" << "-Xlint:unchecked"
  // options.warnings = false
}

java {
  // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
  // if it is present.
  // If you remove this line, sources will not be generated.
  withSourcesJar()
}

jar {
  from(rootProject.file("LICENSE")) {
    rename {"${it}_${project.archives_base_name}"}
  }
}

// configure the maven publication
publishing {
  publications {
    mavenJava(MavenPublication) {
      artifactId archivesBaseName
      from components.java
    }
  }
  // select the repositories you want to publish to
  repositories {
  // uncomment to publish to the local maven
  // mavenLocal()
  }
}
